package com.example.examplemod;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.entity.RenderItem;
import net.minecraft.client.resources.model.ModelResourceLocation;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.relauncher.Side;

import com.splash.item.ItemManager;
/*
 * This class is autogenerated by running the code for gradle.
 *  The only included method is init
 */

@Mod(modid = ExampleMod.MODID, version = ExampleMod.VERSION)
public class ExampleMod
{
    public static final String MODID = "examplemod";
    public static final String VERSION = "1.0";
        
    //You need to create this method
    @EventHandler
    public void preinit(FMLPreInitializationEvent event){ //you need to import FMLPreInitializationEvent
        ItemManager.mainRegistry();
    }
    
    @EventHandler
    public void init(FMLInitializationEvent event)
    {
		// some example code
        System.out.println("DIRT BLOCK >> "+Blocks.dirt.getUnlocalizedName());
        
        //Below is my code
        //Adds a recipie
        GameRegistry.addShapedRecipe(new ItemStack(ItemManager.customSword), 
        		"x","x","y", 'x', Items.emerald, 'y', ItemManager.customItem);
        if(event.getSide() == Side.CLIENT){ //This is needed so it only renders the items on the client
        	//The following line creates a pointer to the item renderer.
            RenderItem renderItem = Minecraft.getMinecraft().getRenderItem();
            //Tells the item model mesher to register a new resource location
            renderItem.getItemModelMesher().register(ItemManager.customItem, 0,
            		new ModelResourceLocation(this.MODID + ":" +
            		ItemManager.customItem.name, "inventory"));
            //does it for another item
            renderItem.getItemModelMesher().register(ItemManager.customSword, 0,
                    new ModelResourceLocation(this.MODID + ":" +
                    ItemManager.customSword.name, "inventory"));
        }
    }
}
